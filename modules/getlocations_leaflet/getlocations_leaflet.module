<?php

/**
 * @file getlocations_leaflet.module
 * @author Bob Hutchinson http://drupal.org/user/52366
 * @copyright GNU GPL
 *
 * Provides Leaflet maps integration for data from Getlocations Fields, location_cck, geofield and geolocation modules.
 *
 *
 */

define('GETLOCATIONS_LEAFLET_PATH', drupal_get_path('module', 'getlocations_leaflet'));

/**
 * Implements hook_help().
 */
function getlocations_leaflet_help($path, $arg) {
  switch ($path) {
    case 'admin/help#getlocations':
      $output = '<p>' . t('Provides Leaflet Maps integration for Getlocations.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function getlocations_leaflet_menu() {
  $items = array();
  $items['admin/config/services/getlocations_leaflet'] = array(
    'title' => 'Getlocations leaflet',
    'description' => 'Configure Getlocations leaflet',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('getlocations_leaflet_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  // getlocations/[entity_type]/$nid    # show all location on one entity_type
  $items['getlocations_leaflet/%getlocations_entity_type/%getlocations_id'] = array(
    'title' => 'Get locations',
    'access callback' => 'getlocations_access_location',
    'page callback' => 'getlocations_leaflet_entity_type_map',
    'page arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
  );



  return $items;
}

/**
 * Implements hook_flush_caches().
 */
function getlocations_leaflet_flush_caches() {
  if (variable_get('getlocations_leaflet_flush', 1)) {
    getlocations_leaflet_regenerate_markers();
  }
}

/**
 * Implements hook_library().
 */
function getlocations_leaflet_library() {

  $libraries['leaflet'] = array(
    'title' => 'Leaflet',
    'website' => 'http://leafletjs.com',
    'version' => '0.7',
    'js' => array(
      libraries_get_path('leaflet') . '/leaflet.js' => array(
        'type' => 'file',
        'group' => JS_LIBRARY,
        'preprocess' => FALSE
      ),
    ),
    'css' => array(
      libraries_get_path('leaflet') . '/leaflet.css' => array(
        'type' => 'file',
        'media' => 'all',
      ),
    ),
  );

  $getlocations_leaflet_paths = getlocations_leaflet_paths_get();
  $getlocations_leaflet_plugins = getlocations_leaflet_plugins();

  $libraries['getlocations-leaflet'] = array(
    'title' => 'Getlocations Leaflet javascript',
    'website' => 'http://drupal.org/project/getlocations',
    'version' => GETLOCATIONS_VERSION,
    'dependencies' => array(
      array('getlocations_leaflet', 'leaflet')
    )
  );

  // add plugins
  $jsarr = array();
  $cssarr = array();
  if ($getlocations_leaflet_plugins['fullscreen_enable']) {
    $jsarr += array(
      GETLOCATIONS_LEAFLET_PATH . '/plugins/fullscreen/Control.FullScreen.js' => array(
        'type' => 'file',
        'preprocess' => FALSE
      ),
    );
    $cssarr += array(
      GETLOCATIONS_LEAFLET_PATH . '/plugins/fullscreen/Control.FullScreen.css' => array(
        'type' => 'file',
        'media' => 'all',
      ),
    );
  }

  if ($getlocations_leaflet_plugins['graticule_enable']) {
    $jsarr += array(
      GETLOCATIONS_LEAFLET_PATH . '/plugins/graticule/L.Graticule.js' => array(
        'type' => 'file',
        'preprocess' => FALSE
      ),
    );
  }

  if ($getlocations_leaflet_plugins['markercluster_enable']) {
    $jsarr += array(
      GETLOCATIONS_LEAFLET_PATH . '/plugins/markercluster/leaflet.markercluster.js' => array(
        'type' => 'file',
        'preprocess' => FALSE
      ),
    );
    $cssarr += array(
      GETLOCATIONS_LEAFLET_PATH . '/plugins/markercluster/MarkerCluster.css' => array(
        'type' => 'file',
        'media' => 'all',
      ),
      GETLOCATIONS_LEAFLET_PATH . '/plugins/markercluster/MarkerCluster.Default.css' => array(
        'type' => 'file',
        'media' => 'all',
      ),
    );
  }

  if ($getlocations_leaflet_plugins['pancontrol_enable']) {
    $jsarr += array(
      GETLOCATIONS_LEAFLET_PATH . '/plugins/pancontrol/L.Control.Pan.js' => array(
        'type' => 'file',
        'preprocess' => FALSE
      ),
    );
    $cssarr += array(
      GETLOCATIONS_LEAFLET_PATH . '/plugins/pancontrol/L.Control.Pan.css' => array(
        'type' => 'file',
        'media' => 'all',
      ),
      GETLOCATIONS_LEAFLET_PATH . '/plugins/pancontrol/L.Control.Pan.ie.css' => array(
        'browsers' => array(
          'IE' => 'lte IE 8',
          '!IE' => FALSE,
        ),
      ),
    );
  }

  if ($getlocations_leaflet_plugins['zoomslider_enable']) {
    $jsarr += array(
      GETLOCATIONS_LEAFLET_PATH . '/plugins/zoomslider/L.Control.Zoomslider.js' => array(
        'type' => 'file',
        'preprocess' => FALSE
      ),
    );
    $cssarr += array(
      GETLOCATIONS_LEAFLET_PATH . '/plugins/zoomslider/L.Control.Zoomslider.css' => array(
        'type' => 'file',
        'media' => 'all',
      ),
      GETLOCATIONS_LEAFLET_PATH . '/plugins/zoomslider/L.Control.Zoomslider.ie.css' => array(
        'browsers' => array(
          'IE' => 'lte IE 8',
          '!IE' => FALSE,
        ),
      ),
    );
  }

  $jsarr += array(
    $getlocations_leaflet_paths['getlocations_leaflet_providers_path'] => array(
      'type' => 'file',
      'preprocess' => FALSE
    ),
    $getlocations_leaflet_paths['getlocations_leaflet_path'] => array(
      'type' => 'file',
      'preprocess' => FALSE
    ),
  );

  $libraries['getlocations-leaflet']['js'] = $jsarr;
  if (! empty($cssarr)) {
    $libraries['getlocations-leaflet']['css'] = $cssarr;
  }

  return $libraries;
}

/**
 * Implements hook_views_api().
 */
function getlocations_leaflet_views_api() {
  return array(
    'api' => 3,
    'path' => GETLOCATIONS_LEAFLET_PATH . '/views',
  );
}


/**
 * Implements hook_field_info().
 * Define Field API field types.
 *
 * @return
 *   An array whose keys are field type names and whose values are arrays
 *   describing the field type.
 */
function getlocations_leaflet_field_info() {

  $info = array(
    'getlocations_leaflet' => array(
      'label' => t('Getlocations Leaflet Map'),
      'description' => t('Provide Getlocations Leaflet Map.'),
      'default_formatter' => 'getlocations_leaflet_map',
      'default_widget' => 'getlocations_leaflet_map',
      'settings' => array(),
    )
  );
  return $info;

}

/**
 * Implements hook_field_formatter_info().
 *
 * Declare information about a formatter.
 *
 * @return
 *   An array keyed by formatter name. Each element of the array is an associative
 *   array with these keys and values:
 *   - "label": The human-readable label for the formatter.
 *   - "field types": An array of field type names that can be displayed using
 *     this formatter.
 *
 */
function getlocations_leaflet_field_formatter_info() {

  $formatters = array(
    'getlocations_leaflet_map' => array(
      'label' => t('Getlocations Leaflet Map Field'),
      'field types' => array('getlocations_leaflet'),
      'settings' => getlocations_leaflet_map_formatter_defaults(),
    ),
    'getlocations_leaflet_link' => array(
      'label' => t('Getlocations Leaflet Link Field'),
      'field types' => array('getlocations_leaflet'),
      'settings' => getlocations_leaflet_link_formatter_defaults(),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 * Build a renderable array for a field value.
 *
 * @param $entity_type
 *   The type of $entity.
 * @param $entity
 *   The entity being displayed.
 * @param $field
 *   The field structure.
 * @param $instance
 *   The field instance.
 * @param $langcode
 *   The language associated with $items.
 * @param $items
 *   Array of values for this field.
 * @param $display
 *   The display settings to use, as found in the 'display' entry of instance definitions.
 * @return
 *   A renderable array for the $items, as an array of child elements keyed
 *   by numeric indexes starting from 0.
 *
 */
function getlocations_leaflet_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  global $language;
  $lang = ($langcode ? $langcode : ($entity->language ? $entity->language : $language->language));
  $settings = $display['settings'];
  $field_name = '';
  if (isset($field['field_name'])) {
    $field_name = $field['field_name'];
  }
  if (empty($field_name) || ! isset($entity->{$field_name}) || empty($entity->{$field_name})) {
    return;
  }
  $element = array();

  switch ($display['type']) {
    case 'getlocations_leaflet_map':

      $module = getlocations_get_current_supported_module();
      $bundle = $instance['bundle'];
      $locative_field_name = (isset($items[0]['locative_field_name']) ? $items[0]['locative_field_name'] : '');
      if ($locative_field_name) {

        if (empty($settings)) {
          $settings = getlocations_leaflet_map_formatter_defaults();
        }
        $default_settings = getlocations_leaflet_map_formatter_defaults();
        $default = getlocations_adjust_vars($default_settings, $settings);
        $getlocations_defaults = getlocations_defaults();


        $locative_fields = $entity->{$locative_field_name}[$lang];
        $locative_fields_count = count($locative_fields);
        $minmaxes = '';

        // marker
        $marker = (isset($default['map_marker']) ? $default['map_marker'] : $getlocations_defaults['map_marker']);
        if (isset($default[$entity_type . '_map_marker'])) {
          $marker = $default[$entity_type . '_map_marker'];
        }
        elseif (isset($getlocations_defaults[$entity_type . '_map_marker'])) {
          $marker = $getlocations_defaults[$entity_type . '_map_marker'];
        }
        $getlocations_markers = variable_get('getlocations_markers', array());
        if (isset($getlocations_markers[$entity_type]['enable']) && $getlocations_markers[$entity_type]['enable']) {
          if (isset($getlocations_markers[$entity_type][$bundle][$field_name]['marker']) && $getlocations_markers[$entity_type][$bundle][$field_name]['marker']) {
            $marker = $getlocations_markers[$entity_type][$bundle][$field_name]['marker'];
          }
        }

        $mapzoom = FALSE;
        $iconlist = array();
        $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
        $location = array();

        // fetch lats and lons
        $ct = 0;
        foreach (array_keys($locative_fields) AS $delta) {
          $title = '';
          $lid = 0;
          if (isset($entity->{$locative_field_name}[$lang][$delta]) && $location = $entity->{$locative_field_name}[$lang][$delta]) {
            // collect the lat and lon
            if ($module == 'getlocations_fields') {
              $lat = $location['latitude'];
              $lon = $location['longitude'];
              $lid = (isset($location['glid']) ? $location['glid'] : 0);
            }
            elseif ($module == 'location_cck') {
              $lat = $location['latitude'];
              $lon = $location['longitude'];
              $lid = (isset($location['lid']) ? $location['lid'] : 0);
            }
            elseif ($module == 'geofield') {
              $lat = $location['lat'];
              $lon = $location['lon'];
            }
            elseif ($module == 'geolocation') {
              $lat = $location['lat'];
              $lon = $location['lng'];
            }

            if (isset($lat) && ! empty($lat) && isset($lon) && ! empty($lon)  && $latlon = getlocations_latlon_check($lat . ',' . $lon)) {
              $ll = explode(',', $latlon);
              $location['latitude'] = $ll[0];
              $location['longitude'] = $ll[1];
              $entity_get_info = entity_get_info($entity_type);
              $entity_key = $entity_get_info['entity keys']['id']; // nid, cid, uid etc
              $entity_id = $entity->{$entity_key};

              if (isset($location['name']) && ! empty($location['name'])) {
                $title = $location['name'];
              }
              else {
                $title = (isset($entity->title) ? $entity->title : '');
              }
              $title = htmlspecialchars_decode(strip_tags($title), ENT_QUOTES);
              $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);

              // per item marker
              if (isset($location['marker']) && ! empty($location['marker'])) {
                $marker = $location['marker'];
              }

              if (isset($location['mapzoom'])) {
                $mapzoom = $location['mapzoom'];
              }

              if ($lid && $default['markeraction'] == 'popup') {
                $markeraction = array('type' => 'popup', 'data' => getlocations_getinfo($lid, $entity_key));
              }
              elseif ($lid && $default['markeraction'] == 'link') {
                $markeraction = array('type' => 'link', 'data' => getlocations_getlidinfo($lid, $entity_key));
              }
              else {
                $markeraction = array();
              }

              $iconlist[$marker] = getlocations_leaflet_get_marker($marker);

              $latlons[$ct] = array($location['latitude'], $location['longitude'], $entity_key, $entity_id, $location['glid'], $title, $marker, $markeraction, '');

              $ct++;
            } // end lat lon check
          }
        } // end foreach

        if ($ct < 2 ) {
          unset($minmaxes);
          $minmaxes = '';
        }

        $map_settings = getlocations_leaflet_map_get_info('Getlocations OSM');
        $map_settings = getlocations_leaflet_get_map_layers($map_settings);

        if (! empty($settings['baselayers'])) {
          $map_layers = array();
          foreach ($settings['baselayers'] AS $k => $v) {
            if (isset($map_settings['map_layers'][$k]) && $settings['baselayers'][$k]) {
              $map_layers[$k] = $map_settings['map_layers'][$k];
            }
          }
          if (! empty($map_layers)) {
            $map_settings['map_layers'] = $map_layers;
          }
        }

        $nodezoom = FALSE;
        if ($ct == 1 && $settings['nodezoom']) {
          $nodezoom = $settings['nodezoom'];
          $map_settings['map_opts']['center'] = array($location['latitude'], $location['longitude']);
          $map_settings['map_opts']['zoom'] = $nodezoom;
        }
        elseif ($ct < 1) {
          $ll = explode(',', $default['latlong']);
          $map_settings['map_opts']['center'] = array($ll[0], $ll[1]);
        }

        $mapid = getlocations_setup_map('', FALSE, FALSE, TRUE);

        // add in some more
        $map_settings = getlocations_leaflet_map_settings_do($map_settings, $default, $latlons, $mapid);

        $map_settings['map_settings']['nodezoom'] = ($nodezoom ? $nodezoom : FALSE);
        $map_settings['map_settings']['minmaxes'] = (empty($minmaxes) ? FALSE : implode(',', $minmaxes));

        $map_settings['icons'] = $iconlist;
        $map_settings['datanum'] = $ct;
        $map_settings['latlons'] = $latlons;

        drupal_add_library('getlocations_leaflet', 'getlocations-leaflet');

        getlocations_leaflet_js_settings_do($map_settings, $mapid);
        $element[$delta] = array(
          '#theme' => 'getlocations_leaflet_map',
          '#width' => $default['width'],
          '#height' => $default['height'],
          '#map_settings' => $map_settings,
          '#mapid' => $mapid,
          '#links' => '',
        );

      } // end if ($locative_field_name)
      break;

    case 'getlocations_leaflet_link':

      if (empty($settings) || ! isset($settings['text'])) {
        $settings = getlocations_leaflet_link_formatter_defaults();
      }

      $bundle = $instance['bundle'];
      $locative_field_name = (isset($items[0]['locative_field_name']) ? $items[0]['locative_field_name'] : '');
      if ($locative_field_name) {
        $locative_fields = $entity->{$locative_field_name}[$lang];
        foreach (array_keys($locative_fields) AS $delta) {
          $entity_get_info = entity_get_info($entity_type);
          $entity_key = $entity_get_info['entity keys']['id']; // nid, cid, uid etc
          $entity_id = $entity->{$entity_key};
          $link_text = $settings['text'];
          if ($settings['text_opt'] == 'page') {
            $entity_title = '';
            if (isset($entity_get_info['entity keys']['label'])) {
              $entity_title = $entity_get_info['entity keys']['label'];
            }
            elseif ($entity_type == 'user') {
              $entity_title = 'name';
            }
            if ($entity_title && isset($entity->{$entity_title})) {
              $link_text = $entity->{$entity_title};
            }
          }
          $link_text = check_plain($link_text);
          $element[$delta] = array(
            '#theme' => 'getlocations_leaflet_link',
            '#link_text' => $link_text,
            '#entity_type' => $entity_type,
            '#entity_id' => $entity_id,
          );
        }
      } // end if ($locative_field_name)
      break;
  } // end switch
  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 * Returns a short summary for the current formatter settings of an instance.
 *
 *
 * If an empty result is returned, the formatter is assumed to have no
 * configurable settings, and no UI will be provided to display a settings
 * form.
 *
 *   The field structure.
 * @param $instance
 *   The instance structure.
 * @param $view_mode
 *   The view mode for which a settings summary is requested.
 *
 * @return
 *   A string containing a short summary of the formatter settings.
 */
function getlocations_leaflet_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();

  switch ($display['type']) {
    case 'getlocations_leaflet_map':

      $summary[] = t('Getlocations Leaflet Map Field settings');

      if ($settings['zoomslider']) {
        $summary[] = t('Show zoom slider: Yes');
      }
      elseif ($settings['zoomControl']) {
        $summary[] = t('Show zoom control: Yes');
      }
      if ($settings['layerControl']) {
        $summary[] = t('Show layer control: Yes');
      }
      if ($settings['scaleControl']) {
        $summary[] = t('Show scale: Yes');
      }
      if ($settings['attributionControl']) {
        $summary[] = t('Show attribution: Yes');
      }
      if ($settings['fullscreen']) {
        $summary[] = t('Show fullscreen control: Yes');
      }
      if ($settings['markercluster']) {
        $summary[] = t('Enable markercluster: Yes');
      }
      if ($settings['pancontrol']) {
        $summary[] = t('Show Pan control: Yes');
      }
      if ($settings['graticule']) {
        $summary[] = t('Show grid: Yes');
      }
      if ($settings['polygons_enable']) {
        $summary[] = t('Enable polygons: Yes');
        if ($settings['polygons_clickable']) {
          $summary[] = t('Polygons clickable: Yes');
        }
      }
      if ($settings['rectangles_enable']) {
        $summary[] = t('Enable rectangles: Yes');
        if ($settings['rectangles_clickable']) {
          $summary[] = t('Rectangles clickable: Yes');
        }
      }
      if ($settings['circles_enable']) {
        $summary[] = t('Enable circles: Yes');
        if ($settings['circles_clickable']) {
          $summary[] = t('Circles clickable: Yes');
        }
      }
      if ($settings['polylines_enable']) {
        $summary[] = t('Enable polylines: Yes');
        if ($settings['polylines_clickable']) {
          $summary[] = t('Polylines clickable: Yes');
        }
      }

      break;

    case 'getlocations_leaflet_link':
      $summary[] = t('Getlocations Leaflet Link Field settings');
      if ($settings['text_opt']) {
        $summary[] = t('Text options: @a', array('@a' => $settings['text_opt']));
      }
      if ($settings['text']) {
        $summary[] = t('Text: @a', array('@a' => $settings['text']));
      }


      break;

  }
  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_settings_form().
 * Returns form elements for a formatter's settings.
 *
 * @param $field
 *   The field structure being configured.
 * @param $instance
 *   The instance structure being configured.
 * @param $view_mode
 *   The view mode being configured.
 * @param $form
 *   The (entire) configuration form array, which will usually have no use here.
 * @param $form_state
 *   The form state of the (entire) configuration form.
 *
 * @return
 *   The form elements for the formatter settings.
 */
function getlocations_leaflet_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  drupal_add_js(GETLOCATIONS_LEAFLET_PATH . '/js/getlocations_leaflet_formatter.js');

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  switch ($display['type']) {
    case 'getlocations_leaflet_map':

      $settings['map_resize'] = 0;
      $settings['fullscreen_disable'] = 0;
      $settings['styles'] = '';
      $labels = array(
        'width' => t('Width'),
        'height' => t('Height'),
      );

      $element += getlocations_map_display_basics_form($settings, $labels);
      unset($element['map_resize']);
      unset($element['fullscreen_disable']);
      unset($element['styles']);
      $element['width']['#element_validate'] = array('getlocations_element_validate_dim');
      $element['height']['#element_validate'] = array('getlocations_element_validate_dim');
      $element['latlong']['#element_validate'] = array('getlocations_element_validate_latlon');

      unset($element['zoom']['#options']['21']);
      unset($element['zoom']['#options']['20']);
      unset($element['zoom']['#options']['19']);

      unset($element['minzoom_map']['#options']['21']);
      unset($element['minzoom_map']['#options']['20']);
      unset($element['minzoom_map']['#options']['19']);

      unset($element['maxzoom_map']['#options']['21']);
      unset($element['maxzoom_map']['#options']['20']);
      unset($element['maxzoom_map']['#options']['19']);

      $element += getlocations_leaflet_display_options_form($settings);

      unset($element['nodezoom']['#options']['21']);
      unset($element['nodezoom']['#options']['20']);
      unset($element['nodezoom']['#options']['19']);

    break;
    case 'getlocations_leaflet_link':
      $element['text'] = array(
        '#type' => 'textfield',
        '#title' => t('Default text'),
        '#description' => t('The text to use if no other option is available.'),
        '#default_value' => $settings['text'],
        '#size' => 25,
      );
      $element['text_opt'] = array(
        '#type' => 'select',
        '#title' => t('Display format'),
        '#default_value' => $settings['text_opt'],
        '#options' => $settings['text_options'],
      );
    break;

  }
  return $element;

}

/**
 * Implements hook_field_widget_info().
 * Expose Field API widget types.
 *
 * @return
 *   An array describing the widget types implemented by the module.
 *
 */
function getlocations_leaflet_field_widget_info() {
  $info = array(
    'getlocations_leaflet_map' => array(
      'label' => t('Getlocations Leaflet Map Field'),
      'field types' => array('getlocations_leaflet'),
      'settings' => array(
        //
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_field_widget_form().
 * Return the form for a single field widget.
 *
 * @param $form
 *   The form structure where widgets are being attached to. This might be a
 *   full form structure, or a sub-element of a larger form.
 * @param $form_state
 *   An associative array containing the current state of the form.
 * @param $field
 *   The field structure.
 * @param $instance
 *   The field instance.
 * @param $langcode
 *   The language associated with $items.
 * @param $items
 *   Array of default values for this field.
 * @param $delta
 *   The order of this item in the array of subelements (0, 1, 2, etc).
 * @param $element
 *   A form element array containing basic properties for the widget.
 * @return
 *   The form elements for a single widget for this field.
 */
function getlocations_leaflet_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  switch ($instance['widget']['type']) {
    case 'getlocations_leaflet_map':

      // is this real or a demo in settings
      $active = TRUE;
      if (empty($element['#entity'])) {
        $active = FALSE;
      }

      $entity_type = $element['#entity_type'];
      $bundle = $element['#bundle'];
      $module = getlocations_get_current_supported_module();
      #$module = 'getlocations_fields';
      $fieldnames = array();
      $query = db_select('field_config', 'f');
      $query->fields('i', array('field_name', 'data'));
      $query->join('field_config_instance', 'i', 'f.id=i.field_id');
      $query->condition('i.bundle', $bundle)
        ->condition('f.module', $module)
        ->condition('i.entity_type', $entity_type)
        ->condition('f.active', 1);
      $rows = $query->execute();
      foreach ($rows AS $row) {
        $data = unserialize($row->data);
        $fieldnames[$row->field_name] = $data['label'];
      }

      $cardinality = $field['cardinality'];
      // Wrap in a fieldset for single fields
      if ($cardinality == 1) {
        $element['#type'] = 'fieldset';
        $element['#collapsible'] = TRUE;
        $element['#collapsed'] = FALSE;
      }

      if (! empty($fieldnames)) {
        $element['#delta'] = $delta;
        $dval = (isset($items[$delta]['locative_field_name']) ? $items[$delta]['locative_field_name'] : (isset($instance['default_value'][$delta]['locative_field_name']) ? $instance['default_value'][$delta]['locative_field_name'] : ''));
        // items only see which field, no choice
        if ($active && $dval) {
          $element['locative_field_name'] = array('#type' => 'value', '#value' => $dval);
          $element['locative_field_name_markup'] = array('#markup' => '<p>' . t('Locative data taken from !f', array('!f' => $fieldnames[$dval])) . '</p>');
         }
        else {
          $element['locative_field_name'] = array(
            '#type' => 'select',
            '#title' => t('Location Field'),
            '#options' => $fieldnames,
            '#description' => t('Field to take locative data from'),
            '#default_value' => $dval,
          );
        }
      }
      else {
        if (! $active) {
          $element['some_info'] = array(
            '#type' => 'markup',
            '#markup' => '<p>' . t('You must attach an instance of !m', array('!m' => $module))
          );
        }
      }

      break;
  }
  return $element;

}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 */
function getlocations_leaflet_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'getlocations_leaflet_field_invalid':
      form_error($element, $error['message']);
      break;
  }

}


/**
 * Implements hook_field_is_empty().
 * Define what constitutes an empty item for a field type.
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 *
 * @param $item
 *   An item that may or may not be empty.
 * @param $field
 *   The field to which $item belongs.
 * @return
 *   TRUE if $field's type considers $item not to contain any data;
 *   FALSE otherwise.
 */
function getlocations_leaflet_field_is_empty($item, $field) {
  return FALSE;
}


function getlocations_leaflet_map_formatter_defaults() {
  return getlocations_leaflet_defaults();
}


function getlocations_leaflet_link_formatter_defaults() {
  return array(
    'text' => t('this location'),
    'text_opt' => 'page',
    'text_options' => array(
      '' => t('None'),
      'page' => t('Page title'),
    ),
  );
}

function getlocations_leaflet_map_settings_do($map_settings, $defaults, $latlons, $mapid) {


  $map_settings['map_opts']['dragging']           = ($defaults['dragging'] ? TRUE : FALSE);
  $map_settings['map_opts']['scrollWheelZoom']    = ($defaults['scrollWheelZoom'] ? TRUE : FALSE);
  $map_settings['map_opts']['doubleClickZoom']    = ($defaults['doubleClickZoom'] ? TRUE : FALSE);
  $map_settings['map_opts']['touchZoom']          = ($defaults['touchZoom'] ? TRUE : FALSE);
  $map_settings['map_opts']['trackResize']        = ($defaults['trackResize'] ? TRUE : FALSE);
  $map_settings['map_opts']['fadeAnimation']      = ($defaults['fadeAnimation'] ? TRUE : FALSE);
  $map_settings['map_opts']['zoomAnimation']      = ($defaults['zoomAnimation'] ? TRUE : FALSE);
  $map_settings['map_opts']['closePopupOnClick']  = ($defaults['closePopupOnClick'] ? TRUE : FALSE);

  $getlocations_leaflet_plugins = getlocations_leaflet_plugins();
  if ($getlocations_leaflet_plugins['fullscreen_enable']) {
    $map_settings['map_settings']['fullscreen'] = ($defaults['fullscreen'] ? TRUE : FALSE);
  }
  else {
    $map_settings['map_settings']['fullscreen'] = FALSE;
  }
  $map_settings['map_settings']['fullscreenposition'] = $defaults['fullscreenposition'];

  if ($getlocations_leaflet_plugins['graticule_enable']) {
    $map_settings['map_settings']['graticule'] = ($defaults['graticule'] ? TRUE : FALSE);
  }
  else {
    $map_settings['map_settings']['graticule'] = FALSE;
  }

  if ($getlocations_leaflet_plugins['markercluster_enable']) {
    $map_settings['map_settings']['markercluster']  = ($defaults['markercluster'] ? TRUE : FALSE);
  }
  else {
    $map_settings['map_settings']['markercluster']  = FALSE;
  }

  if ($getlocations_leaflet_plugins['pancontrol_enable']) {
    $map_settings['map_settings']['leaflet_pancontrol'] = ($defaults['pancontrol'] ? TRUE : FALSE);
  }
  else {
    $map_settings['map_settings']['leaflet_pancontrol'] = FALSE;
  }
  $map_settings['map_settings']['pancontrolposition'] = $defaults['pancontrolposition'];

  $map_settings['map_settings']['markerclusteroptions'] = '';
  if (file_exists(GETLOCATIONS_LEAFLET_PATH . '/plugins/markercluster/markerclusteroptions.inc')) {
    module_load_include('inc', 'getlocations_leaflet', 'plugins/markercluster/markerclusteroptions');
    if (function_exists('getlocations_leaflet_get_markerclusteroptions')) {
      $map_settings['map_settings']['markerclusteroptions'] = getlocations_leaflet_get_markerclusteroptions();
    }
  }

  // Zoom
  if ($defaults['zoomControl']) {
    $map_settings['map_opts']['zoomControl'] = FALSE;
    $map_settings['map_settings']['zoomControl'] = TRUE;
  }
  else {
    $map_settings['map_opts']['zoomControl'] = FALSE;
    $map_settings['map_settings']['zoomControl'] = FALSE;
  }
  $map_settings['map_settings']['zoomcontrolposition'] = $defaults['zoomcontrolposition'];

  // zoomslider
  if ($getlocations_leaflet_plugins['zoomslider_enable']) {
    $map_settings['map_settings']['leaflet_zoomslider'] = ($defaults['zoomslider'] ? TRUE : FALSE);
    // kill off zoomcontrol
    if ($defaults['zoomslider']) {
      $map_settings['map_settings']['zoomControl'] = FALSE;
      $map_settings['map_opts']['zoomControl'] = FALSE;
    }
  }
  else {
    $map_settings['map_settings']['leaflet_zoomslider'] = FALSE;
  }
  $map_settings['map_settings']['zoomsliderposition'] = $defaults['zoomsliderposition'];

  // Attribution
  if ($defaults['attributionControl'] && $defaults['attributioncontrolposition']) {
    $map_settings['map_opts']['attributionControl'] = FALSE;
    $map_settings['map_settings']['attributionControl'] = TRUE;
    $map_settings['map_settings']['attributioncontrolposition'] = $defaults['attributioncontrolposition'];
  }
  else {
    $map_settings['map_opts']['attributionControl'] = ($defaults['attributionControl'] ? TRUE : FALSE);
    $map_settings['map_settings']['attributionControl'] = FALSE;
    $map_settings['map_settings']['attributioncontrolposition'] = '';
  }
  // Layer
  if ($defaults['layerControl'] && $defaults['layercontrolposition']) {
    $map_settings['map_opts']['layerControl'] = FALSE;
    $map_settings['map_settings']['layerControl'] = TRUE;
    $map_settings['map_settings']['layercontrolposition'] = $defaults['layercontrolposition'];
  }
  else {
    $map_settings['map_opts']['layerControl'] = FALSE;
    $map_settings['map_settings']['layerControl'] = ($defaults['layerControl'] ? TRUE : FALSE);
    $map_settings['map_settings']['layercontrolposition'] = '';
  }
  // overlays
  $map_settings['map_settings']['layercontrol_mark_ov'] = ($defaults['layercontrol_mark_ov'] ? TRUE : FALSE);
  $map_settings['map_settings']['layercontrol_mark_ov_label'] = $defaults['layercontrol_mark_ov_label'];

  $map_settings['map_settings']['layercontrol_circ_ov'] = ($defaults['layercontrol_circ_ov'] ? TRUE : FALSE);
  $map_settings['map_settings']['layercontrol_circ_ov_label'] = $defaults['layercontrol_circ_ov_label'];

  $map_settings['map_settings']['layercontrol_polyl_ov'] = ($defaults['layercontrol_polyl_ov'] ? TRUE : FALSE);
  $map_settings['map_settings']['layercontrol_polyl_ov_label'] = $defaults['layercontrol_polyl_ov_label'];

  $map_settings['map_settings']['layercontrol_polyg_ov'] = ($defaults['layercontrol_polyg_ov'] ? TRUE : FALSE);
  $map_settings['map_settings']['layercontrol_polyg_ov_label'] = $defaults['layercontrol_polyg_ov_label'];

  $map_settings['map_settings']['layercontrol_rect_ov'] = ($defaults['layercontrol_rect_ov'] ? TRUE : FALSE);
  $map_settings['map_settings']['layercontrol_rect_ov_label'] = $defaults['layercontrol_rect_ov_label'];

  // default map
  $ml = getlocations_leaflet_map_get_info('Getlocations OSM');
  $map_settings['map_settings']['default_layer_name'] = $defaults['default_baselayer'];
  $map_settings['map_settings']['default_layer_label'] = $ml['map_layers'][$defaults['default_baselayer']]['label'];

  // Scale
  $map_settings['map_settings']['scaleControl'] = ($defaults['scaleControl'] ? TRUE : FALSE);
  $map_settings['map_settings']['scalecontrolposition'] = $defaults['scalecontrolposition'];
  $map_settings['map_settings']['scalecontrolunits'] = $defaults['scalecontrolunits'];

  if ($defaults['minzoom_map'] > -1) {
    $map_settings['map_opts']['minZoom'] = $defaults['minzoom_map'];
  }
  if ($defaults['maxzoom_map'] > -1) {
    $map_settings['map_opts']['maxZoom'] = $defaults['maxzoom_map'];
  }

  $getlocations_leaflet_paths = getlocations_leaflet_paths_get();
  // shapes
  // polygons
  if ($defaults['polygons_enable'] && ! empty($defaults['polygons_coords'])) {
    $polygons = getlocations_get_polygon_settings($defaults);
    if ($polygons) {
      $polygon_settings = array(
        $mapid => $polygons,
      );
      drupal_add_js(array('getlocations_leaflet_polygons' => $polygon_settings), 'setting');
      drupal_add_js($getlocations_leaflet_paths['getlocations_leaflet_polygons_path']);
    }
  }

  // rectangles
  if ($defaults['rectangles_enable'] && (! empty($defaults['rectangles_coords']) || ($defaults['rectangles_apply'] && $defaults['rectangles_dist']))) {
    if ($defaults['rectangles_apply'] && $defaults['rectangles_dist']) {
      // get latlons and set coords
      $tmp = '';
      foreach ($latlons AS $ll) {
        $lats = getlocations_earth_latitude_range($ll[0], $ll[1], $defaults['rectangles_dist']);
        $lngs = getlocations_earth_longitude_range($ll[0], $ll[1], $defaults['rectangles_dist']);
        $tmp .= $lats[0] . ',' . $lngs[0] . '|' . $lats[1] . ',' . $lngs[1] . "\n";
      }
      if ($tmp) {
        $defaults['rectangles_coords'] = $tmp;
      }
    }
    $rectangles = getlocations_get_rectangle_settings($defaults);
    if ($rectangles) {
      $rectangle_settings = array(
        $mapid => $rectangles,
      );
      drupal_add_js(array('getlocations_leaflet_rectangles' => $rectangle_settings), 'setting');
      drupal_add_js($getlocations_leaflet_paths['getlocations_leaflet_rectangles_path']);
    }
  }

  // circles
  if ($defaults['circles_enable'] && $defaults['circles_radius'] > 0 && (! empty($defaults['circles_coords']) || $defaults['circles_apply'])) {
    if ($defaults['circles_apply'] && count($latlons)) {
      // get latlons and set coords
      $tmp = '';
      foreach ($latlons AS $ll) {
        $tmp .= $ll[0] . ',' . $ll[1] . "\n";
      }
      if ($tmp) {
        $defaults['circles_coords'] = $tmp;
      }
    }
    $circles = getlocations_get_circle_settings($defaults);
    if ($circles) {
      $circle_settings = array(
        $mapid => $circles,
      );
      drupal_add_js(array('getlocations_leaflet_circles' => $circle_settings), 'setting');
      drupal_add_js($getlocations_leaflet_paths['getlocations_leaflet_circles_path']);
    }
  }

  // polylines
  if ($defaults['polylines_enable'] && ! empty($defaults['polylines_coords'])) {
    $polylines = getlocations_get_polyline_settings($defaults);
    if ($polylines) {
      $polyline_settings = array(
        $mapid => $polylines,
      );
      drupal_add_js(array('getlocations_leaflet_polylines' => $polyline_settings), 'setting');
      drupal_add_js($getlocations_leaflet_paths['getlocations_leaflet_polylines_path']);
    }
  }

  // geojson
  if ($defaults['geojson_enable'] && !empty($defaults['geojson_data']) && $geojson_path = getlocations_get_geojson_path() ) {
    drupal_add_js($geojson_path);
    $geojson_settings = array(
      $mapid => array(
        'geojson_data' => $defaults['geojson_data'],
        'geojson_options' => $defaults['geojson_options'],
      )
    );
    drupal_add_js(array('getlocations_leaflet_geojson' => $geojson_settings), 'setting');
    drupal_add_js($getlocations_leaflet_paths['getlocations_leaflet_geojson_path']);
  }

  return $map_settings;
}

function getlocations_leaflet_js_settings_do($defaults, $mapid) {

  $settings = array(
    $mapid => $defaults
  );
  drupal_add_js(array('getlocations_leaflet' => $settings), 'setting');

}

function getlocations_leaflet_get_icondata($reset = FALSE) {

  static $icons;
  if (is_array($icons) && !$reset) {
    return $icons;
  }

  $icons = cache_get('getlocations_leaflet_icondata');
  if ($icons) {
    $icons = $icons->data;
  }

  if ($reset || !$icons) {
    module_load_include('inc', 'getlocations_leaflet', 'getlocations_leaflet.markerinfo');
    $icons = _getlocations_leaflet_get_icondata();
  }
  if ($icons) {
    cache_set('getlocations_leaflet_icondata', $icons, 'cache');
  }
  return $icons;

}

function getlocations_leaflet_regenerate_markers() {
  $icons = getlocations_leaflet_get_icondata(TRUE);
  if (! $icons) {
    // no markers found
    drupal_set_message(t('No markers found, you need to install some markers, please see the project page for details.'), 'error');
    watchdog('getlocations_leaflet', 'No markers found.', array(), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

function getlocations_leaflet_get_marker($key) {
  $icons = getlocations_leaflet_get_icondata();
  if (isset($icons[$key])) {
    return $icons[$key];
  }
  return FALSE;
}

function getlocations_leaflet_marker_list() {
  $icons = getlocations_leaflet_get_icondata();
  if (! $icons) {
    // no markers found
    drupal_set_message(t('No markers found, you need to install some markers, please see the project page for details.'), 'error');
    watchdog('getlocations_leaflet', 'No markers found.', array(), WATCHDOG_ERROR);
    return FALSE;
  }
  $data = array();
  foreach ($icons AS $k => $v) {
    $data[$k] = $v['name'];
  }
}

function getlocations_leaflet_controlpositions($dd = TRUE) {
  if ($dd) {
    $controlpositions = array(
      ''   => t('Default'),
      'topleft' => t('Top Left'),
      'topright' => t('Top Right'),
      'bottomright' => t('Bottom Right'),
      'bottomleft' => t('Bottom Left'),
    );
  }
  else {
    $controlpositions = array('topleft', 'topright', 'bottomright', 'bottomleft');
  }
  return $controlpositions;
}

/**
 * Get all available Leaflet map definitions.
 *
 * Derived from the leaflet module
 *
 * @param string $map
 */
function getlocations_leaflet_map_get_info($map = NULL) {
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['getlocations_leaflet_map_info'] = &drupal_static(__FUNCTION__);
  }
  $map_info = &$drupal_static_fast['getlocations_leaflet_map_info'];

  if (empty($map_info)) {
    if ($cache = cache_get("getlocations_leaflet_map_info")) {
      $map_info = $cache->data;
    }
    else {
      $map_info = module_invoke_all('getlocations_leaflet_map_info');

      // Let other modules alter the map info.
      drupal_alter('getlocations_leaflet_map_info', $map_info);

      cache_set("getlocations_leaflet_map_info", $map_info);
    }
  }

  if (empty($map)) {
    return $map_info;
  }
  elseif (isset($map_info[$map])) {
    return $map_info[$map];
  }
}

/**
 * Implements hook_getlocations_leaflet_map_info().
 *
 */
function getlocations_leaflet_getlocations_leaflet_map_info() {

  $map_info = array(
    'Getlocations OSM' => array(
      'label' => 'Getlocations OSM',
      'description' => t('Getlocations Leaflet maps.'),
      'map_opts' => array(
        'dragging'                   => TRUE,
        'touchZoom'                  => TRUE,
        'scrollWheelZoom'            => TRUE,
        'doubleClickZoom'            => TRUE,
        'zoomControl'                => TRUE,
        'attributionControl'         => TRUE,
        'trackResize'                => TRUE,
        'fadeAnimation'              => TRUE,
        'zoomAnimation'              => TRUE,
        'closePopupOnClick'          => TRUE,
        'layerControl'               => TRUE,
        'minZoom'                    => 0,
        'maxZoom'                    => 18,
      ),
      'map_settings' => array(
        'zoomcontrolposition'        => '',
        'attributioncontrolposition' => '',
        'layercontrolposition'       => '',
        'scaleControl'               => FALSE,
        'scalecontrolposition'       => '',
        'scalecontrolunits'          => '',
        'markeraction'               => '',
      ),
      'map_layers' => array(
        'OpenStreetMap.Mapnik' => array(
          'label' => t('OpenStreetMap Default'),
          'type' => 'base',
        ),
        'OpenStreetMap.BlackAndWhite' => array(
          'label' => t('OpenStreetMap Black and White'),
          'type' => 'base',
        ),
        'OpenStreetMap.DE' => array(
          'label' => t('OpenStreetMap German Style'),
          'type' => 'base',
        ),
        'OpenStreetMap.HOT' => array(
          'label' => t('OpenStreetMap H.O.T'),
          'type' => 'base',
        ),
        'Thunderforest.OpenCycleMap' => array(
          'label' => t('Thunderforest OpenCycleMap'),
          'type' => 'base',
        ),
        'Thunderforest.Transport' => array(
          'label' => t('Thunderforest Transport'),
          'type' => 'base',
        ),
        'Thunderforest.Landscape' => array(
          'label' => t('Thunderforest Landscape'),
          'type' => 'base',
        ),
        'Thunderforest.Outdoors' => array(
          'label' => t('Thunderforest Outdoors'),
          'type' => 'base',
        ),
        'MapQuestOpen.OSM' => array(
          'label' => t('MapQuestOpen OSM'),
          'type' => 'base',
        ),
        'MapQuestOpen.Aerial' => array(
          'label' => t('MapQuestOpen Aerial'),
          'type' => 'base',
        ),
        'Stamen.Toner' => array(
          'label' => t('Stamen Toner'),
          'type' => 'base',
        ),
        'Stamen.TonerBackground' => array(
          'label' => t('Stamen Toner Background'),
          'type' => 'base',
        ),
        'Stamen.TonerHybrid' => array(
          'label' => t('Stamen Toner Hybrid'),
          'type' => 'base',
        ),
        'Stamen.TonerLines' => array(
          'label' => t('Stamen Toner Lines'),
          'type' => 'base',
        ),
        'Stamen.TonerLabels' => array(
          'label' => t('Stamen Toner Labels'),
          'type' => 'base',
        ),
        'Stamen.TonerLite' => array(
          'label' => t('Stamen Toner Lite'),
          'type' => 'base',
        ),
        'Stamen.Terrain' => array(
          'label' => t('Stamen Terrain'),
          'type' => 'base',
        ),
        'Stamen.TerrainBackground' => array(
          'label' => t('Stamen Terrain Background'),
          'type' => 'base',
        ),
        'Stamen.Watercolor' => array(
          'label' => t('Stamen Watercolor'),
          'type' => 'base',
        ),
        'Esri.WorldStreetMap' => array(
          'label' => t('Esri WorldStreetMap'),
          'type' => 'base',
        ),
        'Esri.DeLorme' => array(
          'label' => t('Esri DeLorme'),
          'type' => 'base',
        ),
        'Esri.WorldTopoMap' => array(
          'label' => t('Esri WorldTopoMap'),
          'type' => 'base',
        ),
        'Esri.WorldImagery' => array(
          'label' => t('Esri WorldImagery'),
          'type' => 'base',
        ),
        'Esri.WorldTerrain' => array(
          'label' => t('Esri WorldTerrain'),
          'type' => 'base',
        ),
        'Esri.WorldShadedRelief' => array(
          'label' => t('Esri WorldShadedRelief'),
          'type' => 'base',
        ),
        'Esri.WorldPhysical' => array(
          'label' => t('Esri WorldPhysical'),
          'type' => 'base',
        ),
        'Esri.OceanBasemap' => array(
          'label' => t('Esri OceanBasemap'),
          'type' => 'base',
        ),
        'Esri.NatGeoWorldMap' => array(
          'label' => t('Esri NatGeoWorldMap'),
          'type' => 'base',
        ),
        'Esri.WorldGrayCanvas' => array(
          'label' => t('Esri WorldGrayCanvas'),
          'type' => 'base',
        ),
        'Acetate.all' => array(
          'label' => t('Acetate all'),
          'type' => 'base',
        ),
        'Acetate.basemap' => array(
          'label' => t('Acetate basemap'),
          'type' => 'base',
        ),
        'Acetate.terrain' => array(
          'label' => t('Acetate terrain'),
          'type' => 'base',
        ),
        'Acetate.foreground' => array(
          'label' => t('Acetate foreground'),
          'type' => 'base',
        ),
        'Acetate.roads' => array(
          'label' => t('Acetate roads'),
          'type' => 'base',
        ),
        'Acetate.labels' => array(
          'label' => t('Acetate labels'),
          'type' => 'base',
        ),
        'Acetate.hillshading' => array(
          'label' => t('Acetate hillshading'),
          'type' => 'base',
        ),
        'OpenSeaMap' => array(
          'label' => t('OpenSeaMap Overlay'),
          'type' => 'overlay',
        ),
        'OpenWeatherMap.Clouds' => array(
          'label' => t('OpenWeatherMap Clouds Overlay'),
          'type' => 'overlay',
        ),
        'OpenWeatherMap.CloudsClassic' => array(
          'label' => t('OpenWeatherMap Clouds Classic Overlay'),
          'type' => 'overlay',
        ),
        'OpenWeatherMap.Precipitation' => array(
          'label' => t('OpenWeatherMap Precipitation Overlay'),
          'type' => 'overlay',
        ),
        'OpenWeatherMap.PrecipitationClassic' => array(
          'label' => t('OpenWeatherMap Precipitation Classic Overlay'),
          'type' => 'overlay',
        ),
        'OpenWeatherMap.Rain' => array(
          'label' => t('OpenWeatherMap Rain Overlay'),
          'type' => 'overlay',
        ),
        'OpenWeatherMap.RainClassic' => array(
          'label' => t('OpenWeatherMap Rain Classic Overlay'),
          'type' => 'overlay',
        ),
        'OpenWeatherMap.Pressure' => array(
          'label' => t('OpenWeatherMap Pressure Overlay'),
          'type' => 'overlay',
        ),
        'OpenWeatherMap.PressureContour' => array(
          'label' => t('OpenWeatherMap PressureContour Overlay'),
          'type' => 'overlay',
        ),
        'OpenWeatherMap.Wind' => array(
          'label' => t('OpenWeatherMap Wind Overlay'),
          'type' => 'overlay',
        ),
        'OpenWeatherMap.Temperature' => array(
          'label' => t('OpenWeatherMap Temperature Overlay'),
          'type' => 'overlay',
        ),
        'OpenWeatherMap.Snow' => array(
          'label' => t('OpenWeatherMap Snow Overlay'),
          'type' => 'overlay',
        ),
      ),
    ),
  );



  return $map_info;
}

function getlocations_leaflet_defaults() {
  $getlocations_defaults = getlocations_defaults();
  $defaults = array(
    'width'                      => $getlocations_defaults['width'],
    'height'                     => $getlocations_defaults['height'],
    'zoom'                       => $getlocations_defaults['zoom'],
    'minzoom_map'                => $getlocations_defaults['minzoom_map'],
    'maxzoom_map'                => $getlocations_defaults['maxzoom_map'],
    'latlong'                    => $getlocations_defaults['latlong'],
    'nodezoom'                   => $getlocations_defaults['nodezoom'],
    'polygons_enable'            => $getlocations_defaults['polygons_enable'],
    'polygons_strokecolor'       => $getlocations_defaults['polygons_strokecolor'],
    'polygons_strokeopacity'     => $getlocations_defaults['polygons_strokeopacity'],
    'polygons_strokeweight'      => $getlocations_defaults['polygons_strokeweight'],
    'polygons_fillcolor'         => $getlocations_defaults['polygons_fillcolor'],
    'polygons_fillopacity'       => $getlocations_defaults['polygons_fillopacity'],
    'polygons_coords'            => $getlocations_defaults['polygons_coords'],
    'polygons_clickable'         => $getlocations_defaults['polygons_clickable'],
    'polygons_message'           => $getlocations_defaults['polygons_message'],
    'rectangles_enable'          => $getlocations_defaults['rectangles_enable'],
    'rectangles_strokecolor'     => $getlocations_defaults['rectangles_strokecolor'],
    'rectangles_strokeopacity'   => $getlocations_defaults['rectangles_strokeopacity'],
    'rectangles_strokeweight'    => $getlocations_defaults['rectangles_strokeweight'],
    'rectangles_fillcolor'       => $getlocations_defaults['rectangles_fillcolor'],
    'rectangles_fillopacity'     => $getlocations_defaults['rectangles_fillopacity'],
    'rectangles_coords'          => $getlocations_defaults['rectangles_coords'],
    'rectangles_clickable'       => $getlocations_defaults['rectangles_clickable'],
    'rectangles_message'         => $getlocations_defaults['rectangles_message'],
    'rectangles_apply'           => $getlocations_defaults['rectangles_apply'],
    'rectangles_dist'            => $getlocations_defaults['rectangles_dist'],
    'circles_enable'             => $getlocations_defaults['circles_enable'],
    'circles_strokecolor'        => $getlocations_defaults['circles_strokecolor'],
    'circles_strokeopacity'      => $getlocations_defaults['circles_strokeopacity'],
    'circles_strokeweight'       => $getlocations_defaults['circles_strokeweight'],
    'circles_fillcolor'          => $getlocations_defaults['circles_fillcolor'],
    'circles_fillopacity'        => $getlocations_defaults['circles_fillopacity'],
    'circles_coords'             => $getlocations_defaults['circles_coords'],
    'circles_clickable'          => $getlocations_defaults['circles_clickable'],
    'circles_message'            => $getlocations_defaults['circles_message'],
    'circles_radius'             => $getlocations_defaults['circles_radius'],
    'circles_apply'              => $getlocations_defaults['circles_apply'],
    'polylines_enable'           => $getlocations_defaults['polylines_enable'],
    'polylines_strokecolor'      => $getlocations_defaults['polylines_strokecolor'],
    'polylines_strokeopacity'    => $getlocations_defaults['polylines_strokeopacity'],
    'polylines_strokeweight'     => $getlocations_defaults['polylines_strokeweight'],
    'polylines_coords'           => $getlocations_defaults['polylines_coords'],
    'polylines_clickable'        => $getlocations_defaults['polylines_clickable'],
    'polylines_message'          => $getlocations_defaults['polylines_message'],
    // categories
    'category_method'            => $getlocations_defaults['category_method'],
    'category_term_reference_field' => $getlocations_defaults['category_term_reference_field'],
    'category_showhide_buttons'  => $getlocations_defaults['category_showhide_buttons'],
    'categories'                 => $getlocations_defaults['categories'],
    'geojson_enable'             => $getlocations_defaults['geojson_enable'],
    'geojson_data'               => $getlocations_defaults['geojson_data'],
    'geojson_options'            => $getlocations_defaults['geojson_options'],
    'fullscreen'                 => $getlocations_defaults['fullscreen'],
  );

  $fieldables = getlocations_get_fieldable_entity_types();
  foreach ($fieldables AS $entity_type) {
    $defaults[$entity_type . '_map_marker'] = $getlocations_defaults[$entity_type . '_map_marker'];
    $entity_get_info = entity_get_info($entity_type);
    $label = $entity_get_info['label'];
    $defaults['returnlink_' . $entity_type . '_enable'] = 0;
    $defaults['returnlink_' . $entity_type . '_link'] = t('Return to !l', array('!l' => $label));
  }

  $newdefaults = getlocations_adjust_vars($getlocations_defaults, $defaults);
  $newdefaults['dragging']           = $getlocations_defaults['draggable'];
  $newdefaults['scrollWheelZoom']    = $getlocations_defaults['scrollwheel'];
  $newdefaults['doubleClickZoom']    = ($getlocations_defaults['nodoubleclickzoom'] ? 0 : 1);
  $newdefaults['zoomControl']        = ($getlocations_defaults['controltype'] == 'none' ? 0 : 1);
  $newdefaults['touchZoom']          = 1;
  $newdefaults['attributionControl'] = 1;
  $newdefaults['trackResize']        = 1;
  $newdefaults['fadeAnimation']      = 1;
  $newdefaults['zoomAnimation']      = 1;
  $newdefaults['closePopupOnClick']  = 1;
  $newdefaults['layerControl']       = 0;

  $newdefaults['scaleControl']       = $getlocations_defaults['scale'];
  $newdefaults['scalecontrolposition']       = '';
  $newdefaults['scalecontrolunits']          = '';
  $newdefaults['zoomcontrolposition']        = '';
  $newdefaults['attributioncontrolposition'] = '';
  $newdefaults['layercontrolposition']       = '';
  $newdefaults['layercontrol_mark_ov']       = 9;
  $newdefaults['layercontrol_mark_ov_label'] = t('Locations');

  $newdefaults['layercontrol_circ_ov']       = 9;
  $newdefaults['layercontrol_circ_ov_label'] = t('Circles');

  $newdefaults['layercontrol_polyl_ov']       = 9;
  $newdefaults['layercontrol_polyl_ov_label'] = t('Lines');

  $newdefaults['layercontrol_polyg_ov']       = 9;
  $newdefaults['layercontrol_polyg_ov_label'] = t('Polygons');

  $newdefaults['layercontrol_rect_ov']       = 9;
  $newdefaults['layercontrol_rect_ov_label'] = t('Rectangles');

  $newdefaults['fullscreenposition']        = '';

  $newdefaults['markeraction']               = '';
  $newdefaults['markercluster']              = 0;
  $newdefaults['graticule']                  = 0;
  $newdefaults['pancontrol']                 = 0;
  $newdefaults['pancontrolposition']         = '';
  $newdefaults['zoomslider']                 = 0;
  $newdefaults['zoomsliderposition']         = '';

  $newdefaults['default_baselayer']          = 'OpenStreetMap.Mapnik';

  $settings = variable_get('getlocations_leaflet_defaults', '');

  $newdefaults['baselayers'] = $settings['baselayers'];

  $settings = getlocations_adjust_vars($newdefaults, $settings);

  return $settings;
}

function getlocations_leaflet_plugins() {
  $defaults = array(
    'markercluster_enable' => 0,
    'fullscreen_enable'    => 0,
    'graticule_enable'     => 0,
    'pancontrol_enable'    => 0,
    'zoomslider_enable'    => 0,
  );
  $settings = variable_get('getlocations_leaflet_plugins', $defaults);
  $return = getlocations_adjust_vars($defaults, $settings);
  return $return;
}

function getlocations_leaflet_get_map_layers($map_settings) {
  $map_layers = $map_settings['map_layers'];
  $cloudmade_info = variable_get('getlocations_leaflet_cloudmade', '');
  if (! empty($cloudmade_info)) {
    if (isset($cloudmade_info['cloudmade_key']) && ! empty($cloudmade_info['cloudmade_key'])) {
      $cloudmade_key = $cloudmade_info['cloudmade_key'];
      if (isset($cloudmade_info['cloudmade_maps']) && is_array($cloudmade_info['cloudmade_maps']) ) {
        $res = getlocations_leaflet_get_cloudmade_resolutions();
        $add = array();
        foreach ($cloudmade_info['cloudmade_maps'] AS $k => $map) {
          $style_id = $map['style_id'];
          $style_name = $map['style_name'];
          $style_token = $map['style_token'];
          $query = '';
          if (! empty($style_token)) {
            $query = '?token=' . $style_token;
          }
          $add[$style_name] = array(
            'label' => $res[$style_name],
            'type' => 'base',
            'options' => array(
              'apiKey' => $cloudmade_key,
              'styleID' => $style_id,
              'styleToken' => $query,
            ),
          );
        }
        if (count($add)) {
          $map_layers += $add;
        }
      }
    }
  }

  $map_settings['map_layers'] = $map_layers;
  return $map_settings;
}

function getlocations_leaflet_get_cloudmade_resolutions() {
  $output = array(
    'standardResolution1' => t('Standard Resolution 1'),
    'standardResolution2' => t('Standard Resolution 2'),
    'standardResolution3' => t('Standard Resolution 3'),
    'standardResolution4' => t('Standard Resolution 4'),
    'standardResolution5' => t('Standard Resolution 5'),
    'highResolution1' => t('High Resolution 1'),
    'highResolution2' => t('High Resolution 2'),
    'highResolution3' => t('High Resolution 3'),
    'highResolution4' => t('High Resolution 4'),
    'highResolution5' => t('High Resolution 5'),
    'highResolution1s' => t('High Resolution 1 Small tile'),
    'highResolution2s' => t('High Resolution 2 Small tile'),
    'highResolution3s' => t('High Resolution 3 Small tile'),
    'highResolution4s' => t('High Resolution 4 Small tile'),
    'highResolution5s' => t('High Resolution 5 Small tile'),
  );
  return $output;
}


function getlocations_leaflet_display_options_form($defaults) {
  $form = array();

  $controlpositions = getlocations_leaflet_controlpositions();

  $form['nodezoom'] = getlocations_element_map_zoom(
    t('Default Zoom for Single location'),
    $defaults['nodezoom'],
    t('The Default zoom level for a single marker.')
  );

  $form['scrollWheelZoom'] = getlocations_element_map_checkbox(
    t('Scrollwheel'),
    $defaults['scrollWheelZoom'],
    t('Enable scrollwheel zooming.')
  );
  $form['touchZoom'] = getlocations_element_map_checkbox(
    t('Touch Zoom'),
    $defaults['touchZoom'],
    t('Enable touch zooming. Applies to touchscreens.')
  );

  $form['dragging'] = getlocations_element_map_checkbox(
    t('Draggable'),
    $defaults['dragging'],
    t('Enable dragging the map.')
  );

  $form['doubleClickZoom'] = getlocations_element_map_checkbox(
    t('DoubleClick Zoom'),
    $defaults['doubleClickZoom'],
    t('Enable DoubleClick Zooming.')
  );

  $form['scaleControl'] = getlocations_element_map_checkbox(
    t('Scale'),
    $defaults['scaleControl'],
    t('Show scale.')
  );
  $form['scaleControl']['#suffix'] = '<div id="wrap-getlocations-scalecontrol">';
  $form['scalecontrolunits'] = getlocations_element_dd(
    t('Distance Units'),
    $defaults['scalecontrolunits'],
    array('' => t('Defaults'), 'metric' => t('Metric'), 'imperial' => t('Imperial'))
  );
  $form['scalecontrolposition'] = getlocations_element_dd(
    t('Position of Scale Control'),
    $defaults['scalecontrolposition'],
    $controlpositions
  );
  $form['scalecontrolposition']['#suffix'] = '</div>';

  $form['zoomControl'] = getlocations_element_map_checkbox(
    t('Zoom Control'),
    $defaults['zoomControl'],
    t('Enable Zoom Control on the map.')
  );
  $form['zoomControl']['#suffix'] = '<div id="wrap-getlocations-zoomcontrol">';
  $form['zoomcontrolposition'] = getlocations_element_dd(
    t('Position of Zoom Control'),
    $defaults['zoomcontrolposition'],
    $controlpositions
  );
  $form['zoomcontrolposition']['#suffix'] = '</div>';

  $form['attributionControl'] = getlocations_element_map_checkbox(
    t('Attribution Control'),
    $defaults['attributionControl'],
    t('Enable Attribution Control on the map.')
  );
  $form['attributionControl']['#suffix'] = '<div id="wrap-getlocations-attributioncontrol">';
  $form['attributioncontrolposition'] = getlocations_element_dd(
    t('Position of Attribution Control'),
    $defaults['attributioncontrolposition'],
    $controlpositions
  );
  $form['attributioncontrolposition']['#suffix'] = '</div>';

  $form['layerControl'] = getlocations_element_map_checkbox(
    t('Layer Control'),
    $defaults['layerControl'],
    t('Enable Layer Control on the map.')
  );
  $form['layerControl']['#suffix'] = '<div id="wrap-getlocations-layercontrol">';

  $form['layercontrol_mark_ov'] = getlocations_element_map_checkbox(
    t('Layer Control Marker Overlay'),
    $defaults['layercontrol_mark_ov'],
    t('Add a checkbox to switch Markers on and off to the Layer Control.')
  );
  $form['layercontrol_mark_ov_label'] = getlocations_element_map_tf(
    t('Layer Control Marker Overlay Label'),
    $defaults['layercontrol_mark_ov_label'],
    t('The label to display on the Layer Control.'),
    20
  );

  $form['layercontrol_circ_ov'] = getlocations_element_map_checkbox(
    t('Layer Control Circles Overlay'),
    $defaults['layercontrol_circ_ov'],
    t('Add a checkbox to switch Circles on and off to the Layer Control.')
  );
  $form['layercontrol_circ_ov_label'] = getlocations_element_map_tf(
    t('Layer Control Circles Overlay Label'),
    $defaults['layercontrol_circ_ov_label'],
    t('The label to display on the Layer Control.'),
    20
  );

  $form['layercontrol_polyl_ov'] = getlocations_element_map_checkbox(
    t('Layer Control Lines Overlay'),
    $defaults['layercontrol_polyl_ov'],
    t('Add a checkbox to switch Lines on and off to the Layer Control.')
  );
  $form['layercontrol_polyl_ov_label'] = getlocations_element_map_tf(
    t('Layer Control Lines Overlay Label'),
    $defaults['layercontrol_polyl_ov_label'],
    t('The label to display on the Layer Control.'),
    20
  );

  $form['layercontrol_polyg_ov'] = getlocations_element_map_checkbox(
    t('Layer Control Polygons Overlay'),
    $defaults['layercontrol_polyg_ov'],
    t('Add a checkbox to switch Polygons on and off to the Layer Control.')
  );
  $form['layercontrol_polyg_ov_label'] = getlocations_element_map_tf(
    t('Layer Control Polygons Overlay Label'),
    $defaults['layercontrol_polyg_ov_label'],
    t('The label to display on the Layer Control.'),
    20
  );

  $form['layercontrol_rect_ov'] = getlocations_element_map_checkbox(
    t('Layer Control Rectangles Overlay'),
    $defaults['layercontrol_rect_ov'],
    t('Add a checkbox to switch Rectangles on and off to the Layer Control.')
  );
  $form['layercontrol_rect_ov_label'] = getlocations_element_map_tf(
    t('Layer Control Rectangles Overlay Label'),
    $defaults['layercontrol_rect_ov_label'],
    t('The label to display on the Layer Control.'),
    20
  );

  $form['layercontrolposition'] = getlocations_element_dd(
    t('Position of Layer Control'),
    $defaults['layercontrolposition'],
    $controlpositions
  );
  $form['layercontrolposition']['#suffix'] = '</div>';

  // baselayers
  $map_settings = getlocations_leaflet_map_get_info('Getlocations OSM');
  $map_settings = getlocations_leaflet_get_map_layers($map_settings);
  $map_layers = $map_settings['map_layers'];

  // reconfigure $defaults['baselayers']
  $old_baselayers = $defaults['baselayers'];
  $defaults['baselayers'] = array();
  $default_baselayer_opts = array();
  foreach ($map_layers AS $k => $v) {
    if ($k == $defaults['default_baselayer']) {
      $defaults['baselayers'][$k] = (isset($old_baselayers[$k]) ? $old_baselayers[$k] : 1);
    }
    else {
      $defaults['baselayers'][$k] = (isset($old_baselayers[$k]) ? $old_baselayers[$k] : 0);
    }
    // make a list of enable baselayers for a dropdown
    if (isset($old_baselayers[$k]) && $old_baselayers[$k]) {
      if ($map_layers[$k]['type'] == 'base') {
        $default_baselayer_opts[$k] = $map_layers[$k]['label'];
      }
    }
  }

  if (count($default_baselayer_opts) > 1) {
    $form['default_baselayer'] = getlocations_element_dd(
      t('Default Map'),
      $defaults['default_baselayer'],
      $default_baselayer_opts
    );

  }
  else {
    $form['default_baselayer'] = array(
      '#type' => 'value',
      '#value' => $defaults['default_baselayer']
    );
  }


  $form['baselayers'] =  array(
    '#type' => 'fieldset',
    '#title' => t('Enable map types'),
    '#description' => t('Select which maps you want to be available. You must select at least one'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  foreach ($defaults['baselayers'] AS $key => $value) {
    $label = (isset($map_layers[$key]['label']) ? $map_layers[$key]['label'] : $key);
    $form['baselayers'][$key] = getlocations_element_map_checkbox(
      $label,
      $defaults['baselayers'][$key],
      (isset($map_layers[$key]['description']) ? $map_layers[$key]['description'] : '')
    );
  }

  $form['trackResize'] = getlocations_element_map_checkbox(
    t('Automatic Resizing'),
    $defaults['trackResize'],
    t('Enable Automatic Resizing of the map.')
  );

  $form['fadeAnimation'] = getlocations_element_map_checkbox(
    t('fadeAnimation'),
    $defaults['fadeAnimation'],
    t('Enable fadeAnimation on the map.')
  );

  $form['zoomAnimation'] = getlocations_element_map_checkbox(
    t('zoomAnimation'),
    $defaults['zoomAnimation'],
    t('Enable zoomAnimation on the map.')
  );

  $form['closePopupOnClick'] = getlocations_element_map_checkbox(
    t('closePopupOnClick'),
    $defaults['closePopupOnClick'],
    t('Enable closePopupOnClick on the map.')
  );

  // plugins
  $getlocations_leaflet_plugins = getlocations_leaflet_plugins();
  if ($getlocations_leaflet_plugins['fullscreen_enable']) {
    // fullscreen
    $form['fullscreen'] = getlocations_element_map_checkbox(
      t('Fullscreen'),
      $defaults['fullscreen'],
      t('Enable Fullscreen button on the map.')
    );
    $form['fullscreen']['#suffix'] = '<div id="getlocations-fullscreen-wrap">';
    $form['fullscreenposition'] = getlocations_element_dd(
      t('Position of Fullscreen Control'),
      $defaults['fullscreenposition'],
      $controlpositions
    );
    $form['fullscreenposition']['#suffix'] = '</div>';
  }
  else {
    $form['fullscreen'] = array('#type' => 'value', '#value' => 0);
    $form['fullscreenposition'] = array('#type' => 'value', '#value' => $defaults['fullscreenposition']);
  }

  if ($getlocations_leaflet_plugins['markercluster_enable']) {
    $form['markercluster'] = getlocations_element_map_checkbox(
      t('Marker Cluster'),
      $defaults['markercluster'],
      t('Enable markercluster on the map.')
    );
  }
  else {
    $form['markercluster'] = array('#type' => 'value', '#value' => 0);
  }
  if ($getlocations_leaflet_plugins['graticule_enable']) {
    $form['graticule'] = getlocations_element_map_checkbox(
      t('Graticule'),
      $defaults['graticule'],
      t('Enable a grid on the map.')
    );
  }
  else {
    $form['graticule'] = array('#type' => 'value', '#value' => 0);
  }

  if ($getlocations_leaflet_plugins['pancontrol_enable']) {
    $form['pancontrol'] = getlocations_element_map_checkbox(
      t('Pancontrol'),
      $defaults['pancontrol'],
      t('Enable Pan control on the map.')
    );
    $form['pancontrol']['#suffix'] = '<div id="getlocations-pancontrol-wrap">';
    $form['pancontrolposition'] = getlocations_element_dd(
      t('Position of Pan Control'),
      $defaults['pancontrolposition'],
      $controlpositions
    );
    $form['pancontrolposition']['#suffix'] = '</div>';
  }
  else {
    $form['pancontrol'] = array('#type' => 'value', '#value' => 0);
  }

  if ($getlocations_leaflet_plugins['zoomslider_enable']) {
    $form['zoomslider'] = getlocations_element_map_checkbox(
      t('Zoomslider'),
      $defaults['zoomslider'],
      t('Enable Zoom Slider on the map.')
    );
    $form['zoomslider']['#suffix'] = '<div id="getlocations-zoomslider-wrap">';
    $form['zoomsliderposition'] = getlocations_element_dd(
      t('Position of Zoomslider'),
      $defaults['zoomsliderposition'],
      $controlpositions
    );
    $form['zoomsliderposition']['#suffix'] = '</div>';
  }
  else {
    $form['zoomslider'] = array('#type' => 'value', '#value' => 0);
  }

  $form['markeraction'] = getlocations_element_dd(
    t('Marker action'),
    $defaults['markeraction'],
    array(
      '' => t('None'),
      'popup' => t('Popup'),
      'link' => t('Link to content')
    )
  );

  // shapes
  $form += getlocations_shapes_form($defaults, '');

  // geojson
  $form += getlocations_geojson_form($defaults);
  $form['geojson_options']['#type'] = 'hidden';

  return $form;
}

function getlocations_leaflet_paths_get($reset = FALSE) {

  $defaults = array(
    'getlocations_leaflet_path'            => GETLOCATIONS_LEAFLET_PATH . '/js/getlocations_leaflet.js',
    'getlocations_leaflet_circles_path'    => GETLOCATIONS_LEAFLET_PATH . '/js/getlocations_leaflet_circles.js',
    'getlocations_leaflet_formatter_path'  => GETLOCATIONS_LEAFLET_PATH . '/js/getlocations_leaflet_formatter.js',
    'getlocations_leaflet_polygons_path'   => GETLOCATIONS_LEAFLET_PATH . '/js/getlocations_leaflet_polygons.js',
    'getlocations_leaflet_polylines_path'  => GETLOCATIONS_LEAFLET_PATH . '/js/getlocations_leaflet_polylines.js',
    'getlocations_leaflet_rectangles_path' => GETLOCATIONS_LEAFLET_PATH . '/js/getlocations_leaflet_rectangles.js',
    'getlocations_leaflet_geojson_path'    => GETLOCATIONS_LEAFLET_PATH . '/js/getlocations_leaflet_geojson.js',
    'getlocations_leaflet_providers_path'  => GETLOCATIONS_LEAFLET_PATH . '/js/getlocations_leaflet_providers.js',
  );
  if ($reset) {
    $getlocations_leaflet_paths = $defaults;
  }
  else {
    $settings = variable_get('getlocations_leaflet_paths', $defaults);
    $getlocations_leaflet_paths = getlocations_adjust_vars($defaults, $settings);
  }
  return $getlocations_leaflet_paths;
}


function getlocations_leaflet_settings_form() {

  $form = array();

  $form['rebuild'] = array(
    '#type' => 'fieldset',
    '#title' => t('Regenerate Getlocations leaflet marker cache'),
    '#description' => t('If you are having problems with markers, or have changed anything in the markers library, click on the Regenerate button.'),
  );
  $form['rebuild']['rebuild_marker_js'] = array(
    '#type' => 'submit',
    '#value' => t('Regenerate'),
    '#submit' => array('_getlocations_leaflet_rebuild_marker_js_submit'),
  );
  $form['rebuild']['getlocations_leaflet_flush'] = getlocations_element_map_checkbox(
    t('Flush marker cache'),
    variable_get('getlocations_leaflet_flush', 1),
    t('Include the marker cache when the Drupal cache is flushed.')
  );

  // plugins
  $getlocations_leaflet_plugins = getlocations_leaflet_plugins();
  $form['getlocations_leaflet_plugins'] = array(
    '#type' => 'fieldset',
    '#title' => t('Leaflet plugins'),
    '#tree' => TRUE,
  );
  $form['getlocations_leaflet_plugins']['markercluster_enable'] = getlocations_element_map_checkbox(
    t('Enable Markercluster plugin'),
    $getlocations_leaflet_plugins['markercluster_enable']
  );
  $form['getlocations_leaflet_plugins']['fullscreen_enable'] = getlocations_element_map_checkbox(
    t('Enable Fullscreen plugin'),
    $getlocations_leaflet_plugins['fullscreen_enable']
  );
  $form['getlocations_leaflet_plugins']['graticule_enable'] = getlocations_element_map_checkbox(
    t('Enable Graticule plugin'),
    $getlocations_leaflet_plugins['graticule_enable']
  );
  $form['getlocations_leaflet_plugins']['pancontrol_enable'] = getlocations_element_map_checkbox(
    t('Enable Pancontrol plugin'),
    $getlocations_leaflet_plugins['pancontrol_enable']
  );
  $form['getlocations_leaflet_plugins']['zoomslider_enable'] = getlocations_element_map_checkbox(
    t('Enable Zoomslider plugin'),
    $getlocations_leaflet_plugins['zoomslider_enable']
  );

  // cloudmade
  $getlocations_leaflet_cloudmade = variable_get('getlocations_leaflet_cloudmade', array('cloudmade_key' => '', 'cloudmade_maps' => array()));
  $form['getlocations_leaflet_cloudmade'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cloudmade maps'),

    // This will store all the defaults in one variable.
    '#tree' => TRUE,
  );
  $form['getlocations_leaflet_cloudmade']['cloudmade_key'] = getlocations_element_map_tf(
    t('CloudMade Developers Key'),
    $getlocations_leaflet_cloudmade['cloudmade_key'],
    t('In order to use the <a target="_blank" href="@services">CloudMade services</a>, you must <a target="_blank" href="@key">register and get a key</a> first.', array('@services' => 'http://developers.cloudmade.com/projects', '@key' => 'http://account.cloudmade.com/register')),
    40
  );
  $mapnum = count($getlocations_leaflet_cloudmade['cloudmade_maps']);
  if ($mapnum == 0) {
    $mapnum = 2;
  }
  else {
    $mapnum++;
  }
  // limit mapnum
  if ($mapnum > 5) {
    $mapnum = 5;
  }
  $res = getlocations_leaflet_get_cloudmade_resolutions();
  for ($ct = 0; $ct < $mapnum; $ct++) {

    $form['getlocations_leaflet_cloudmade']['cloudmade_maps'][$ct]['style_name'] = getlocations_element_dd(
      t('Style Name @num', array('@num' => $ct+1)),
      (isset($getlocations_leaflet_cloudmade['cloudmade_maps'][$ct]['style_name']) ? $getlocations_leaflet_cloudmade['cloudmade_maps'][$ct]['style_name'] : ''),
      $res,
      t('"Standard Resolution" is for general use, "High Resolution" is best for tablets, "High Resolution Small tile" is best for smartphones.')
    );

    $form['getlocations_leaflet_cloudmade']['cloudmade_maps'][$ct]['style_id'] = getlocations_element_map_tf(
      t('Style ID @num', array('@num' => $ct+1)),
      (isset($getlocations_leaflet_cloudmade['cloudmade_maps'][$ct]['style_id']) ? $getlocations_leaflet_cloudmade['cloudmade_maps'][$ct]['style_id'] : ''),
      t('The style ID for the map you want to include, see <a href="@editor">Cloudmade style editor</a>, note the number in the bottom righthand corner of the examples.', array('@editor' => 'http://maps.cloudmade.com/editor')),
      10
    );
    $form['getlocations_leaflet_cloudmade']['cloudmade_maps'][$ct]['style_token'] = getlocations_element_map_tf(
      t('Style Token @num', array('@num' => $ct+1)),
      (isset($getlocations_leaflet_cloudmade['cloudmade_maps'][$ct]['style_token']) ? $getlocations_leaflet_cloudmade['cloudmade_maps'][$ct]['style_token'] : ''),
      t('Some styles require a token.'),
      40
    );

  }

  $settings = getlocations_leaflet_defaults();

  $form['getlocations_leaflet_defaults'] = array(
    '#type' => 'fieldset',
    '#title' => t('Page settings'),
    // This will store all the defaults in one variable.
    '#tree' => TRUE,
  );
  $labels = array(
    'width' => t('Width'),
    'height' => t('Height'),
  );

  $form['getlocations_leaflet_defaults'] += getlocations_map_display_basics_form($settings, $labels);
  unset($form['getlocations_leaflet_defaults']['map_resize']);
  unset($form['getlocations_leaflet_defaults']['fullscreen_disable']);
  unset($form['getlocations_leaflet_defaults']['styles']);

  unset($form['getlocations_leaflet_defaults']['zoom']['#options']['21']);
  unset($form['getlocations_leaflet_defaults']['zoom']['#options']['20']);
  unset($form['getlocations_leaflet_defaults']['zoom']['#options']['19']);
  unset($form['getlocations_leaflet_defaults']['minzoom_map']['#options']['21']);
  unset($form['getlocations_leaflet_defaults']['minzoom_map']['#options']['20']);
  unset($form['getlocations_leaflet_defaults']['minzoom_map']['#options']['19']);

  unset($form['getlocations_leaflet_defaults']['maxzoom_map']['#options']['21']);
  unset($form['getlocations_leaflet_defaults']['maxzoom_map']['#options']['20']);
  unset($form['getlocations_leaflet_defaults']['maxzoom_map']['#options']['19']);

  $form['getlocations_leaflet_defaults'] += getlocations_leaflet_display_options_form($settings);
  unset($form['getlocations_leaflet_defaults']['nodezoom']['#options']['21']);
  unset($form['getlocations_leaflet_defaults']['nodezoom']['#options']['20']);
  unset($form['getlocations_leaflet_defaults']['nodezoom']['#options']['19']);

  // return links
  $fieldables = getlocations_get_fieldable_entity_types();
  foreach ($fieldables AS $entity_type) {
    $entity_get_info = entity_get_info($entity_type);
    $label = $entity_get_info['label'];
    if (getlocations_check_entity_type($entity_type)) {
      $form['getlocations_leaflet_defaults']['returnlink_' . $entity_type . '_enable'] = getlocations_element_map_checkbox(
        t('Show link back to !label', array('!label' => $label)),
        $settings['returnlink_' . $entity_type . '_enable']
      );
      $form['getlocations_leaflet_defaults']['returnlink_' . $entity_type . '_link'] = getlocations_element_map_tf(
        t('Text of !label return link', array('!label' => $label)),
        $settings['returnlink_' . $entity_type . '_link'],
        t('Use %t to insert the !label title', array('!label' => $label)),
        30,
        64
      );
    }
  }

  // javascript paths
  $getlocations_leaflet_paths = getlocations_leaflet_paths_get();
  $form['getlocations_leaflet_paths'] = array(
    '#type' => 'fieldset',
    '#title' => t('Javascript paths'),
    '#description' => t('For advanced users who want to supply their own javascript.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    // This will store all the defaults in one variable.
    '#tree' => TRUE,
  );

  $form['getlocations_leaflet_paths']['getlocations_leaflet_path'] = getlocations_element_path(
    t('Path to Getlocations leaflet javascript file'),
    $getlocations_leaflet_paths['getlocations_leaflet_path'],
    80,
    128,
    t('Where the Getlocations leaflet javascript file is located.')
  );
  $form['getlocations_leaflet_paths']['getlocations_leaflet_circles_path'] = getlocations_element_path(
    t('Path to Getlocations leaflet circles javascript file'),
    $getlocations_leaflet_paths['getlocations_leaflet_circles_path'],
    80,
    128,
    t('Where the Getlocations leaflet circles javascript file is located.')
  );
  $form['getlocations_leaflet_paths']['getlocations_leaflet_formatter_path'] = getlocations_element_path(
    t('Path to Getlocations leaflet formatter javascript file'),
    $getlocations_leaflet_paths['getlocations_leaflet_formatter_path'],
    80,
    128,
    t('Where the Getlocations leaflet formatter javascript file is located.')
  );
  $form['getlocations_leaflet_paths']['getlocations_leaflet_polygons_path'] = getlocations_element_path(
    t('Path to Getlocations leaflet polygons javascript file'),
    $getlocations_leaflet_paths['getlocations_leaflet_polygons_path'],
    80,
    128,
    t('Where the Getlocations leaflet polygons javascript file is located.')
  );
  $form['getlocations_leaflet_paths']['getlocations_leaflet_polylines_path'] = getlocations_element_path(
    t('Path to Getlocations leaflet polylines javascript file'),
    $getlocations_leaflet_paths['getlocations_leaflet_polylines_path'],
    80,
    128,
    t('Where the Getlocations leaflet polylines javascript file is located.')
  );
  $form['getlocations_leaflet_paths']['getlocations_leaflet_rectangles_path'] = getlocations_element_path(
    t('Path to Getlocations leaflet rectangles javascript file'),
    $getlocations_leaflet_paths['getlocations_leaflet_rectangles_path'],
    80,
    128,
    t('Where the Getlocations leaflet rectangles javascript file is located.')
  );
  $form['getlocations_leaflet_paths']['getlocations_leaflet_geojson_path'] = getlocations_element_path(
    t('Path to Getlocations leaflet geojson javascript file'),
    $getlocations_leaflet_paths['getlocations_leaflet_geojson_path'],
    80,
    128,
    t('Where the Getlocations leaflet geojson javascript file is located.')
  );
  $form['getlocations_leaflet_paths']['getlocations_leaflet_providers_path'] = getlocations_element_path(
    t('Path to Getlocations leaflet providers javascript file'),
    $getlocations_leaflet_paths['getlocations_leaflet_providers_path'],
    80,
    128,
    t('Where the Getlocations leaflet providers javascript file is located.')
  );

  $form['getlocations_leaflet_paths']['reset'] = getlocations_element_map_checkbox(
    t('Reset'),
    0,
    t('Reset the paths to the defaults.')
  );

  unset($form['#theme']);
  $form['#theme'] = 'getlocations_leaflet_settings_form';
  $form['#validate'][] = 'getlocations_leaflet_settings_validate';
  $form['#attached']['js'] = array(GETLOCATIONS_LEAFLET_PATH . '/js/getlocations_leaflet_formatter.js' => array('type' => 'file'));

  return system_settings_form($form);

}

function getlocations_leaflet_settings_validate($form, &$form_state) {
  $reset = $form_state['values']['getlocations_leaflet_paths']['reset'];
  unset($form_state['values']['getlocations_leaflet_paths']['reset']);
  if ($reset) {
    $form_state['values']['getlocations_leaflet_paths'] = getlocations_leaflet_paths_get(TRUE);
  }

  // we need to ensure that any empty cloudmade_maps are not saved
  $mapnum = count($form_state['values']['getlocations_leaflet_cloudmade']['cloudmade_maps']);
  $emptyfound = FALSE;
  for ($ct = 0; $ct < $mapnum; $ct++) {
    if (empty($form_state['values']['getlocations_leaflet_cloudmade']['cloudmade_maps'][$ct]['style_id'])) {
      unset($form_state['values']['getlocations_leaflet_cloudmade']['cloudmade_maps'][$ct]);
      $emptyfound = TRUE;
    }
  }
  // reorder them in case some clown empties one before the last one
  if ($emptyfound) {
    $mapnum = count($form_state['values']['getlocations_leaflet_cloudmade']['cloudmade_maps']);
    $temp = array();
    $ct = 0;
    foreach ($form_state['values']['getlocations_leaflet_cloudmade']['cloudmade_maps'] AS $k => $v) {
      $temp[$ct] = $v;
      $ct++;
    }
    if (count($temp)) {
      $form_state['values']['getlocations_leaflet_cloudmade']['cloudmade_maps'] = $temp;
    }
  }

  // css check
  if (isset($form_state['values']['getlocations_leaflet_defaults']['width'])) {
    if ($check = getlocations_dim_check($form_state['values']['getlocations_leaflet_defaults']['width'])) {
      $form_state['values']['getlocations_leaflet_defaults']['width'] = $check;
    }
    else {
      form_set_error('getlocations_leaflet_defaults][width', t('Width must be valid css'));
    }
  }
  if (isset($form_state['values']['getlocations_leaflet_defaults']['height'])) {
    if ($check = getlocations_dim_check($form_state['values']['getlocations_leaflet_defaults']['height'])) {
      $form_state['values']['getlocations_leaflet_defaults']['height'] = $check;
    }
    else {
      form_set_error('getlocations_leaflet_defaults][height', t('Height must be valid css'));
    }
  }

}

/**
 * Rebuild marker js.
 */
function _getlocations_leaflet_rebuild_marker_js_submit($form, &$form_state) {
  if (getlocations_leaflet_regenerate_markers()) {
    drupal_set_message(t('Marker cache regenerated.'));
  }
}

function getlocations_leaflet_entity_type_map($type, $entity_id) {

  $entity_type = getlocations_get_entity_type_from_path($type);
  $locations = getlocations_load_locations($entity_id, $entity_type);
  $settings = variable_get('getlocations_leaflet_defaults', '');
  $entity_get_info = entity_get_info($entity_type);
  $load_hook = $entity_get_info['load hook'];
  $object = $load_hook($entity_id);

  $entity_link = '';
  $uri_callback = '';
  if (isset($entity_get_info['uri callback'])) {
    $uri_callback = $entity_get_info['uri callback'];
    $entity_link = $uri_callback($object);
  }
  $entity_title = '';
  $title = 'name';
  if (isset($entity_get_info['entity keys']['label'])) {
    $title = $entity_get_info['entity keys']['label'];
  }
  if (isset($object->{$title})) {
    $entity_title = $object->{$title};
  }
  $entity_key = '';
  if (isset($entity_get_info['entity keys']['id'])) {
    $entity_key = $entity_get_info['entity keys']['id'];
  }

  $getlocations_defaults = getlocations_defaults();
  $getlocations_leaflet_defaults = getlocations_leaflet_defaults();
  $marker = $getlocations_defaults['map_marker'];
  if (isset($getlocations_defaults[$entity_type . '_map_marker'])) {
    $marker = $getlocations_defaults[$entity_type . '_map_marker'];
  }
  if (isset($getlocations_leaflet_defaults[$entity_type . '_map_marker'])) {
    $marker = $getlocations_leaflet_defaults[$entity_type . '_map_marker'];
  }

  $getlocations_markers = variable_get('getlocations_markers', array());
  if (isset($getlocations_markers[$entity_type]['enable']) && $getlocations_markers[$entity_type]['enable']) {
    $type_markers = getlocations_get_type_markers();
    foreach ($type_markers AS $et => $bundles) {
      if ($et == $entity_type) {
        foreach ($bundles AS $bundle => $field_names) {
          foreach ($field_names AS $field_name => $marker_data) {
            if (isset($getlocations_markers[$entity_type][$bundle][$field_name]['marker']) && $getlocations_markers[$entity_type][$bundle][$field_name]['marker']) {
              $marker = $getlocations_markers[$entity_type][$bundle][$field_name]['marker'];
            }
          }
        }
      }
    }
  }

  $returnlink = FALSE;
  $links = array();
  if ($entity_type && $entity_link) {
    #if ($getlocations_defaults['returnlink_' . $entity_type . '_enable']) {
    if ($settings['returnlink_' . $entity_type . '_enable']) {
      if (is_object($object)) {
        #$linktext = $getlocations_defaults['returnlink_' . $entity_type . '_link'];
        $linktext = $settings['returnlink_' . $entity_type . '_link'];
        if ( preg_match("/%t/", $linktext)) {
          $linktext = preg_replace("/%t/", $entity_title, $linktext);
        }
        #$returnlink = '<div class="getlocations_returnlink">' . l($linktext, $entity_link['path']) . '</div>';
        $returnlink = l($linktext, $entity_link['path']);
      }
    }
    if ($returnlink) {
      $links['returnlink'] = $returnlink;
    }
  }

  $latlons = array();
  $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
  $ct = 0;

  if (count($locations)) {
    // we should loop over them and dump bummers with no lat/lon
    foreach ($locations AS $key => $location) {
      if ($latlon = getlocations_latlon_check($location['latitude'] . ',' . $location['longitude'])) {
        $ll = explode(',', $latlon);
        $location['latitude'] = $ll[0];
        $location['longitude'] = $ll[1];
        $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);

        $lid = (isset($location['glid']) ? $location['glid'] : (isset($location['lid']) ? $location['lid'] : 0));

        if (! isset($location['key'])) {
          $location['key'] = '';
        }
        else {
          $location['lid'] = $entity_id;
        }
        // node only
        if ($entity_type == 'node') {
          // term markers
          $marker = getlocations_get_term_marker($entity_id, $marker);
        }

        // per location marker
        if (isset($location['marker']) && ! empty($location['marker'])) {
          $marker = $location['marker'];
        }

        if ($lid && $settings['markeraction'] == 'popup') {
          $markeraction = array('type' => 'popup', 'data' => getlocations_getinfo($lid, $entity_key));
        }
        elseif ($lid && $settings['markeraction'] == 'link') {
          $markeraction = array('type' => 'link', 'data' => getlocations_getlidinfo($lid, $entity_key));
        }
        else {
          $markeraction = array();
        }

        $name = htmlspecialchars_decode($location['name'] ? strip_tags($location['name']) : strip_tags($entity_title), ENT_QUOTES);
        $latlons[$ct] = array($location['latitude'], $location['longitude'], $entity_key, $entity_id, $lid, $entity_title, $marker, $markeraction, '');
        $iconlist[$marker] = getlocations_leaflet_get_marker($marker);

        $ct++;
      }

    } // end foreach

    if ($ct < 2 ) {
      unset($minmaxes);
      $minmaxes = '';
    }

    $map_settings = getlocations_leaflet_map_get_info('Getlocations OSM');
    $map_settings = getlocations_leaflet_get_map_layers($map_settings);

    if (! empty($settings['baselayers'])) {
      $map_layers = array();
      foreach ($settings['baselayers'] AS $k => $v) {
        if (isset($map_settings['map_layers'][$k]) && $settings['baselayers'][$k]) {
          $map_layers[$k] = $map_settings['map_layers'][$k];
        }
      }
      if (! empty($map_layers)) {
        $map_settings['map_layers'] = $map_layers;
      }
    }

    $nodezoom = FALSE;
    if ($ct == 1 && $settings['nodezoom']) {
      $nodezoom = $settings['nodezoom'];
      $map_settings['map_opts']['center'] = array($location['latitude'], $location['longitude']);
      $map_settings['map_opts']['zoom'] = $nodezoom;
    }
    elseif ($ct < 1) {
      $ll = explode(',', $settings['latlong']);
      $map_settings['map_opts']['center'] = array($ll[0], $ll[1]);
    }

    $mapid = getlocations_setup_map('', FALSE, FALSE, TRUE);

    // add in some more
    $map_settings = getlocations_leaflet_map_settings_do($map_settings, $settings, $latlons, $mapid);
    $map_settings['map_settings']['nodezoom'] = ($nodezoom ? $nodezoom : FALSE);
    $map_settings['map_settings']['minmaxes'] = (empty($minmaxes) ? FALSE : implode(',', $minmaxes));

    $map_settings['icons'] = $iconlist;
    $map_settings['datanum'] = $ct;
    $map_settings['latlons'] = $latlons;

    drupal_add_library('getlocations_leaflet', 'getlocations-leaflet');

    getlocations_leaflet_js_settings_do($map_settings, $mapid);

    $output = theme('getlocations_leaflet_map', array(
      'width' => $settings['width'],
      'height' => $settings['height'],
      'map_settings' => $map_settings,
      'mapid' => $mapid,
      'links' => $links
    )
    );
    return $output;

  }

}


/**
 * Implements hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function getlocations_leaflet_theme() {

  return array(
    'getlocations_leaflet_link' => array(
      'variables' => array(
        'link_text' => '',
        'entity_type' => '',
        'entity_id' => 0,
      ),
    ),
    'getlocations_leaflet_map' => array(
      'variables' => array(
        'width' => '',
        'height' => '',
        'map_settings' => '',
        'mapid' => '',
        'links' => '',
      ),
    ),
    'getlocations_leaflet_plugin_style_options_form' => array(
      'render element' => 'form',
    ),
    'getlocations_leaflet_settings_form' => array(
      'render element' => 'form',
    ),


  );
}

function theme_getlocations_leaflet_link($variables) {
  $link_text   = $variables['link_text'];
  $entity_type = $variables['entity_type'];
  $entity_id   = $variables['entity_id'];

  $output = '';
  $path = 'getlocations_leaflet/' . $entity_type . '/' . $entity_id;
  $link = t('!l on a map', array('!l' => l($link_text, $path)));

  $output .= '<div class="getlocations_link">' . $link . '</div>';
  return $output;

}

function theme_getlocations_leaflet_map($variables) {
  drupal_add_css(GETLOCATIONS_LEAFLET_PATH . '/getlocations_leaflet.css');
  $width = $variables['width'];
  $height = $variables['height'];
  $map_settings = $variables['map_settings'];
  $mapid = $variables['mapid'];
  $links = $variables['links'];

  $output = '';

  // links
  if (isset($links['returnlink'])) {
    $output .= '<div class="getlocations_returnlink">' . $links['returnlink'] . '</div>';
  }


  // wrap the map
  $output .= '<div id="getlocations_leaflet_wrapper_' . $mapid . '"  style="width: ' . $width . '; height: ' . $height . '" >';
  $output .= '<div class="getlocations_leaflet_canvas" id="getlocations_leaflet_canvas_' . $mapid . '" style="width: 100%; height: 100%" ></div>';
  $output .= '</div>';

  return $output;

}

function theme_getlocations_leaflet_plugin_style_options_form($variables) {
  $form = $variables['form'];
  $output = '';

  $output .= drupal_render_children($form);
  return $output;
}

function theme_getlocations_leaflet_settings_form($variables) {
  $form = $variables['form'];
  $output = '';
  $form['getlocations_leaflet_defaults']['returnlink_node_link']['#prefix'] = '<div id="wrap-node-link">';
  $form['getlocations_leaflet_defaults']['returnlink_page_link']['#suffix'] = '</div>';
  if (isset($form['getlocations_leaflet_defaults']['returnlink_user_link'])) {
    $form['getlocations_leaflet_defaults']['returnlink_user_link']['#prefix'] = '<div id="wrap-user-link">';
    $form['getlocations_leaflet_defaults']['returnlink_user_link']['#suffix'] = '</div>';
  }
  if (isset($form['getlocations_leaflet_defaults']['returnlink_term_link'])) {
    $form['getlocations_leaflet_defaults']['returnlink_term_link']['#prefix'] = '<div id="wrap-term-link">';
    $form['getlocations_leaflet_defaults']['returnlink_term_link']['#suffix'] = '</div>';
  }
  if (isset($form['getlocations_leaflet_defaults']['returnlink_comment_link'])) {
    $form['getlocations_leaflet_defaults']['returnlink_comment_link']['#prefix'] = '<div id="wrap-comment-link">';
    $form['getlocations_leaflet_defaults']['returnlink_comment_link']['#suffix'] = '</div>';
  }

  $output .= drupal_render_children($form);
  return $output;
}
